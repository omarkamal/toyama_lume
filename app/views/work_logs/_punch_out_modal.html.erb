<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
  <div class="bg-white rounded-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
    <div class="p-6">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-xl font-bold text-gray-900">End Your Day</h2>
        <button type="button" onclick="closePunchOutModal()" class="text-gray-400 hover:text-gray-600">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <%= form_with(model: @work_log, url: complete_punch_out_work_log_path(@work_log), method: :post) do |f| %>
        <!-- Session Summary -->
        <div class="mb-6 p-4 bg-blue-50 rounded-lg">
          <div class="flex justify-between items-center">
            <div>
              <p class="text-sm font-medium text-blue-900">Session Duration</p>
              <p class="text-xs text-blue-700">Started at <%= @work_log.punch_in.strftime("%I:%M %p") %></p>
            </div>
            <div class="text-2xl font-bold text-blue-600">
              <%= ((Time.current - @work_log.punch_in) / 1.hour).round(1) %>h
            </div>
          </div>
        </div>

        <!-- Task Completion Review -->
        <% if @work_log.tasks.any? %>
          <div class="mb-6">
            <h3 class="text-sm font-semibold text-gray-700 mb-3">Review Your Tasks</h3>
            <div class="space-y-3">
              <% @work_log.work_log_tasks.includes(:task).each do |work_log_task| %>
                <div class="border rounded-lg p-3">
                  <div class="flex items-center justify-between mb-2">
                    <div class="flex-1">
                      <div class="font-medium text-sm"><%= work_log_task.task.title %></div>
                      <div class="flex items-center space-x-2 mt-1">
                        <%= task_priority_badge(work_log_task.task.priority) %>
                        <span class="text-xs text-gray-500"><%= work_log_task.task.category %></span>
                      </div>
                    </div>
                    <div class="flex items-center space-x-2">
                      <%= check_box_tag "work_log_task_ids[]", work_log_task.id, work_log_task.completed?,
                          class: "h-4 w-4 text-green-600 border-gray-300 rounded focus:ring-green-500",
                          onchange: "toggleTaskActions(#{work_log_task.id})" %>
                      <span class="text-xs text-gray-600">Complete</span>
                    </div>
                  </div>

                  <!-- Duration Input (shown when task is marked complete) -->
                  <div id="duration_<%= work_log_task.id %>" class="<%= 'hidden' unless work_log_task.completed? %>">
                    <label class="text-xs text-gray-600">Time spent (minutes):</label>
                    <input type="number"
                           name="durations[<%= work_log_task.id %>]"
                           value="<%= work_log_task.duration_minutes || 60 %>"
                           min="0"
                           step="15"
                           class="w-full mt-1 px-3 py-1 border rounded text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500">
                  </div>

                  <!-- Carry Forward Option (shown when task is NOT marked complete) -->
                  <div id="carry_forward_<%= work_log_task.id %>" class="<%= 'hidden' if work_log_task.completed? %> mt-2 pt-2 border-t border-gray-200">
                    <label class="flex items-center cursor-pointer">
                      <%= check_box_tag "carry_forward_task_ids[]", work_log_task.id, false,
                          class: "h-4 w-4 text-indigo-600 border-gray-300 rounded focus:ring-indigo-500" %>
                      <span class="ml-2 text-xs text-gray-600">Add to pending tasks for later</span>
                    </label>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>

        <!-- Add Additional Tasks -->
        <div class="mb-6">
          <h3 class="text-sm font-semibold text-gray-700 mb-3">Add any additional tasks:</h3>
          <div id="additional_tasks">
            <div class="additional-task mb-2">
              <input type="text"
                     name="additional_tasks[]"
                     placeholder="Task description..."
                     class="w-full px-3 py-2 border rounded-lg text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
            </div>
          </div>
          <button type="button" onclick="addAdditionalTask()" class="text-xs text-indigo-600 hover:text-indigo-800">
            + Add another task
          </button>
        </div>

        <!-- Location Capture (Required) -->
        <div class="mb-6">
          <h3 class="text-sm font-semibold text-gray-700 mb-3">
            Confirm Location <span class="text-red-500">*</span>
          </h3>
          <div class="flex items-center justify-between p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
              </svg>
              <span class="text-sm text-gray-600">Location required to punch out</span>
            </div>
            <div id="location_status" class="text-xs text-gray-500">
              <button type="button" onclick="captureLocation()" class="text-indigo-600 hover:text-indigo-800 font-medium">
                Get Location
              </button>
            </div>
          </div>
          <%= hidden_field_tag :location_lat, nil, required: true %>
          <%= hidden_field_tag :location_lng, nil, required: true %>
          <div id="punch_out_location_error" class="mt-2 text-xs text-red-600 hidden">
            Location is required to punch out. Please enable location access.
          </div>
        </div>

        <!-- Final Mood Check (Random Weekly Check) -->
        <% if @should_request_mood %>
          <div class="mb-6 relative">
            <!-- Special background for mood check -->
            <div class="absolute inset-0 bg-gradient-to-r from-orange/10 via-red/10 to-pink/10 rounded-xl -z-10"></div>
            <div class="relative p-6 rounded-xl border border-orange/20">
              <!-- Header with special messaging -->
              <div class="text-center mb-4">
                <div class="inline-flex items-center gap-2 px-3 py-1 bg-orange/20 rounded-full text-sm font-medium text-orange mb-2">
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                  Weekly Wellness Check
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">How was your day?</h3>
                <p class="text-sm text-gray-600">Before you wrap up, we'd love to know how you're feeling. Your feedback helps us create a better workplace! üåü</p>
              </div>

              <!-- Enhanced mood selection -->
              <div class="flex justify-center space-x-6">
                <label class="cursor-pointer group">
                  <input type="radio" name="work_log[mood]" value="happy" class="sr-only peer">
                  <div class="text-5xl peer-checked:scale-125 transition-all duration-300 group-hover:scale-110 filter drop-shadow-sm">üòä</div>
                  <div class="text-sm text-center mt-2 font-medium text-gray-700 peer-checked:text-orange">Amazing</div>
                </label>
                <label class="cursor-pointer group">
                  <input type="radio" name="work_log[mood]" value="neutral" class="sr-only peer" checked>
                  <div class="text-5xl peer-checked:scale-125 transition-all duration-300 group-hover:scale-110 filter drop-shadow-sm">üòê</div>
                  <div class="text-sm text-center mt-2 font-medium text-gray-700 peer-checked:text-orange">Good</div>
                </label>
                <label class="cursor-pointer group">
                  <input type="radio" name="work_log[mood]" value="sad" class="sr-only peer">
                  <div class="text-5xl peer-checked:scale-125 transition-all duration-300 group-hover:scale-110 filter drop-shadow-sm">üòû</div>
                  <div class="text-sm text-center mt-2 font-medium text-gray-700 peer-checked:text-orange">Tiring</div>
                </label>
              </div>
            </div>
          </div>
        <% end %>

        <!-- Action Buttons -->
        <div class="flex space-x-3">
          <button type="button"
                  onclick="closePunchOutModal()"
                  class="flex-1 px-4 py-3 border border-gray-300 rounded-lg text-gray-700 font-medium hover:bg-gray-50 transition">
            Cancel
          </button>
          <button type="submit"
                  class="flex-1 px-4 py-3 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition">
            Punch Out
          </button>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
function closePunchOutModal() {
  console.log('closePunchOutModal called');

  // Find the turbo frame
  const frame = document.querySelector('turbo-frame#punch_out_modal') || 
                document.querySelector('turbo-frame[id="punch_out_modal"]');
  
  console.log('Frame found:', frame);

  if (frame) {
    console.log('Resetting frame by removing src and clearing content');
    // Remove the src attribute to prevent reloading
    frame.removeAttribute('src');
    frame.removeAttribute('complete');
    // Clear content to remove the modal
    frame.innerHTML = '';
    // Force Turbo to mark frame as complete/idle
    frame.setAttribute('complete', '');
  } else {
    console.log('Frame not found, removing modal overlay');
    const modalOverlay = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-50');
    if (modalOverlay) {
      modalOverlay.remove();
    }
  }
}

function toggleTaskActions(taskId) {
  const durationDiv = document.getElementById('duration_' + taskId);
  const carryForwardDiv = document.getElementById('carry_forward_' + taskId);
  const checkbox = document.querySelector(`input[value="${taskId}"][name="work_log_task_ids[]"]`);
  const carryForwardCheckbox = document.querySelector(`input[value="${taskId}"][name="carry_forward_task_ids[]"]`);

  if (checkbox.checked) {
    // Task completed - show duration, hide carry forward
    durationDiv.classList.remove('hidden');
    carryForwardDiv.classList.add('hidden');
    if (carryForwardCheckbox) carryForwardCheckbox.checked = false;
  } else {
    // Task not completed - hide duration, show carry forward
    durationDiv.classList.add('hidden');
    carryForwardDiv.classList.remove('hidden');
  }
}

function addAdditionalTask() {
  const container = document.getElementById('additional_tasks');
  const newTask = document.createElement('div');
  newTask.className = 'additional-task mb-2';
  newTask.innerHTML = `
    <input type="text"
           name="additional_tasks[]"
           placeholder="Task description..."
           class="w-full px-3 py-2 border rounded-lg text-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500">
  `;
  container.appendChild(newTask);
}

function captureLocation() {
  const statusDiv = document.getElementById('location_status');
  const errorDiv = document.getElementById('punch_out_location_error');

  statusDiv.innerHTML = '<span class="text-yellow-600">Getting location...</span>';
  errorDiv.classList.add('hidden');

  if (!navigator.geolocation) {
    statusDiv.innerHTML = '<span class="text-red-600">Not supported</span>';
    errorDiv.textContent = 'Your browser does not support geolocation.';
    errorDiv.classList.remove('hidden');
    return;
  }

  // Options for geolocation
  const options = {
    enableHighAccuracy: true,
    timeout: 10000,
    maximumAge: 0
  };

  navigator.geolocation.getCurrentPosition(
    function(position) {
      document.getElementById('location_lat').value = position.coords.latitude;
      document.getElementById('location_lng').value = position.coords.longitude;
      statusDiv.innerHTML = '<span class="text-green-600">‚úì Location captured</span>';
      errorDiv.classList.add('hidden');
    },
    function(error) {
      let errorMessage = '';
      
      switch(error.code) {
        case error.PERMISSION_DENIED:
          errorMessage = 'Location permission denied. Please enable location access in your browser settings and try again.';
          break;
        case error.POSITION_UNAVAILABLE:
          errorMessage = 'Location information is unavailable. Please ensure location services are enabled on your device.';
          break;
        case error.TIMEOUT:
          errorMessage = 'Location request timed out. Please try again.';
          break;
        default:
          errorMessage = 'An unknown error occurred while getting your location.';
      }
      
      statusDiv.innerHTML = '<button type="button" onclick="captureLocation()" class="text-indigo-600 hover:text-indigo-800 font-medium">Retry</button>';
      errorDiv.textContent = errorMessage;
      errorDiv.classList.remove('hidden');
      
      console.error('Geolocation error:', error.code, error.message);
    },
    options
  );
}

// Auto-capture location on load
document.addEventListener('DOMContentLoaded', function() {
  captureLocation();
});
</script>